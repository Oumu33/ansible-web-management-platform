version: '3.8'

services:
  # ===== 数据库服务 =====
  postgres:
    image: postgres:15-alpine
    container_name: ansible-platform-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ansible_web}
      POSTGRES_USER: ${POSTGRES_USER:-ansible_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ansible_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ansible_user} -d ${POSTGRES_DB:-ansible_web}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ansible-network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: ansible-platform-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - ansible-network

  # ===== 主应用服务 =====
  ansible-web-backend:
    build:
      context: ./ansible/ansible-web/backend
      dockerfile: Dockerfile
    container_name: ansible-web-backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-ansible_user}:${POSTGRES_PASSWORD:-ansible_secure_password}@postgres:5432/${POSTGRES_DB:-ansible_web}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-["http://localhost:3000"]}
      DEBUG: ${DEBUG:-false}
    volumes:
      - ansible_data:/app/data
      - ./logs:/app/logs
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - ansible-network

  # 监控平台
  monitoring-platform:
    build:
      context: ./all-in-one
      dockerfile: Dockerfile
    container_name: monitoring-platform
    environment:
      DATABASE_PATH: /app/data/monitoring.db
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - monitoring_data:/app/data
      - ./logs:/app/logs
    ports:
      - "${MONITORING_PORT:-3001}:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - ansible-network

  # MIB 管理平台
  mib-platform:
    build:
      context: ./mib-platform
      dockerfile: Dockerfile
    container_name: mib-platform
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: sqlite:///app/data/mib.db
    volumes:
      - mib_data:/app/data
      - ./uploads:/app/uploads
    ports:
      - "${MIB_PORT:-3003}:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - ansible-network

  # ===== 监控和指标收集 =====
  prometheus:
    image: prom/prometheus:latest
    container_name: ansible-platform-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    restart: unless-stopped
    networks:
      - ansible-network

  grafana:
    image: grafana/grafana:latest
    container_name: ansible-platform-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3002}:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - ansible-network

  # ===== 反向代理 =====
  nginx:
    image: nginx:alpine
    container_name: ansible-platform-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    depends_on:
      - ansible-web-backend
      - monitoring-platform
      - mib-platform
    restart: unless-stopped
    networks:
      - ansible-network

# ===== 数据卷 =====
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ansible_data:
    driver: local
  monitoring_data:
    driver: local
  mib_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ===== 网络配置 =====
networks:
  ansible-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16